#!/usr/bin/env python

from argparse import ArgumentParser, BooleanOptionalAction
from diffusers import StableDiffusionPipeline, StableDiffusionImg2ImgPipeline
from torch import Generator
from PIL import Image

model_path = './stable-diffusion-v1-4'
device_name = 'mps'

def dummy_checker_callback(images, **kwargs):
    return images, False

def disable_checker(pipe):
    pipe.safety_checker = dummy_checker_callback

    return pipe

def build_generator(args):
    if args.rand:
        seed = Generator().seed()
    else:
        seed = args.seed

    return Generator().manual_seed(seed)

def run_text_generator(args):
    pipe = StableDiffusionPipeline.from_pretrained(model_path)
    pipe = pipe.to(device_name)
    pipe = disable_checker(pipe)
    pipe.enable_attention_slicing()

    generator = build_generator(args)

    result = pipe(prompt=args.prompt,
                  num_images_per_prompt=args.images,
                  num_inference_steps=args.steps,
                  generator=generator,
                  guidance_scale=args.scale,
                  height=args.height,
                  width=args.width)

    return result.images

def run_text_image_generator(args):
    pipe = StableDiffusionImg2ImgPipeline.from_pretrained(model_path)
    pipe = pipe.to(device_name)
    pipe = disable_checker(pipe)
    pipe.enable_attention_slicing()

    generator = build_generator(args)

    init_image = Image.open(args.init)
    init_image = init_image.resize((args.width, args.height))

    result = pipe(prompt=args.prompt,
                  num_images_per_prompt=args.images,
                  num_inference_steps=args.steps,
                  generator=generator,
                  strength=args.strength,
                  guidance_scale=args.scale,
                  height=args.height,
                  width=args.width,
                  init_image=init_image)

    return result.images

def save_images(images):
    for i, image in enumerate(images):
        image.save('output.{}.png'.format(i))

def main():
    default_prompt = 'The consolation of rain. Figures. Oil painting.'

    parser = ArgumentParser()

    parser.add_argument("--prompt", type=str, default=default_prompt,
                        help='text prompt to target image at')

    parser.add_argument("--rand", action=BooleanOptionalAction,
                        help='use a non-deterministic seed')

    parser.add_argument("--seed", type=int, default=234234234,
                        help='deterministic seed value')

    parser.add_argument("--steps", type=int, default=50,
                        help='number of image iterations performed')

    parser.add_argument("--images", type=int, default=1,
                        help='number of images generated')

    parser.add_argument("--height", type=int, default=512,
                        help='output image height')

    parser.add_argument("--width", type=int, default=512,
                        help='output image width')

    parser.add_argument("--scale", type=float, default=7.5,
                        help='guidance scale value')

    parser.add_argument("--init", type=str, default='',
                        help='initial guidance image')

    parser.add_argument("--strength", type=float, default=0.75,
                        help='strength of guidance image')

    args = parser.parse_args()

    if args.init == '':
        save_images(run_text_generator(args))
    else:
        save_images(run_text_image_generator(args))

if __name__ == "__main__":
    main()
